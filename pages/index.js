import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import SideBar from '../components/SideBar'
import SubSidebar from '../components/SubSidebar'
import {gql, useQuery, useMutation} from '@apollo/client'
import { GET_NOTES, GET_TODOS } from '../graphql/queries'
import { CREATE_NOTE } from '../graphql/mutations'
import HomeNotes from '../components/HomeNotes'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import {faFilePen, faArrowRight} from "@fortawesome/free-solid-svg-icons";
import Link from 'next/link'
import {useRouter} from 'next/router'
import { useEffect, useState } from 'react'
import { SpinnerCircularFixed } from "spinners-react";
import TodoList from '../components/TodoList'
import MobileNav from '../components/MobileNav'


export default function Home() {

  
  

  const { loading, error, data } = useQuery(GET_NOTES)

  const {loading: loadingTodos, error: errorTodos, data: dataTodos} = useQuery(GET_TODOS)

  const [searchValue, setSearchValue] = useState('')

  const search = (e) => {
    setSearchValue(e.target.value)
  }







  const [addNote] = useMutation(CREATE_NOTE, {
    update(cache, { data: { addNote } }) {
      const { notes } = cache.readQuery({ query: GET_NOTES })
      cache.writeQuery({
        query: GET_NOTES,
        data: { notes: notes.concat([addNote]) }
      })
    }
  })





  



  return (
    <div className=" h-auto lg:h-screen lg:overflow-hidden">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      { data?  (



      <div className='flex w-full'>
        <MobileNav />
       <SideBar search={search}/>


      <div className='flex flex-col lg:flex-row  w-10/12  px-2 gap-12'> 

      <div className='h-max bg-white text-black rounded-md w-screen lg:w-7/12  px-2 mt-[3rem] px-2 '> 

      <div className='flex items-center justify-between px-2 pt-4 pb-2'>
        <Link href='/notes'>
          {/* <div className='flex hover:underline hover:underline-offset-2 hover:decoration-[blue] cursor-pointer'>
      <p >Notes <span><FontAwesomeIcon icon={faArrowRight} width={20}/></span></p>
      </div> */}

    <div className='flex hover:border-b-2 hover:border-b-[blue]  cursor-pointer items-center gap-2'>
      <p>Notes</p>
      <FontAwesomeIcon icon={faArrowRight} width={15}/>
      </div>

      </Link>

      <div>
        <FontAwesomeIcon icon={faFilePen} width={20} />
      </div>
      </div>

      <hr></hr>

      {/* <div className='flex w-full  h-auto pt-4 overflow-x-scroll'> */}

      <div className="flex flex-wrap w-full h-auto pt-4 overflow-x-scroll">
        
        <div className='h-[20rem] flex items-center gap-2'>
          
        <Link href='/notes'>
        <div className='h-[16rem] border-2  w-[12rem] rounded-md mt-2 bg-white text-black flex flex-col items-center justify-center hover:shadow-2xl cursor-pointer' onClick={addNote}>
          <FontAwesomeIcon icon={faFilePen} width={30}/>
          <p>Create New Note</p>
        </div>
        </Link>


        {data && data.notes?.filter((note) => {
          return note.title.toLowerCase().includes(searchValue.toLowerCase())

        }).map(note => (
          <HomeNotes key={note.id} note={note}/>
        )).reverse()}
        
        



 

        </div>

       


        </div>

        <div>
          <h2 className='px-2 pt-6'>Sketch Pad</h2>
        <textarea className='h-[20rem] bg-white text-black border-2 rounded-md w-11/12  mx-2 px-2 resize-none py-6 text-xl' placeholder='Jott fings down 👍'>

        </textarea>
        </div>

      </div>

      <div className='w-full lg:w-5/12  flex flex-col flex flex-col items-center mt-2 lg:mt-[4rem]'> 
      <div className='flex items-center justify-between px-2 lg:pt-4 lg:pb-2'>
   
   
      <Link href='/todo'><p className='cursor-pointer hover:underline hover:decoration-[blue] text-2xl'>Todos</p></Link>
    
  
      </div>



      <div className='h-full flex flex-col mt-[4rem] w-full items-center' >
      {dataTodos && dataTodos.todos?.map(todo => (
        <TodoList key={todo.id} todo={todo}/>
      )).reverse()}

      

      </div>

      </div>

    
     

       </div>

        


        </div> ) : ( <div className="w-full h-screen flex flex-col items-center justify-center"> <SpinnerCircularFixed
          enabled={true}
          secondaryColor="white"
          color="blue"
          speed="150"
          // className="h-[300px] w-[300px]"
          size="150"
        />
        </div> 

)}
    </div>
  )
}
